// <auto-generated />
using BitcoinApp.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BitcoinApp.Api.Migrations
{
    [DbContext(typeof(BitcoinAppContext))]
    partial class BitcoinAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BitcoinApp.Domain.InTransactionAggregate.InTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 7)");

                    b.Property<string>("BlockHash")
                        .IsRequired();

                    b.Property<int>("ConfirmationsCount");

                    b.Property<int>("ToWalletId");

                    b.Property<string>("TxId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ConfirmationsCount");

                    b.HasIndex("ToWalletId");

                    b.ToTable("InTransactions");

                    b.HasData(
                        new { Id = 1, Amount = 0.004m, BlockHash = "000000000000000000090d549fe271b01dac3b8361ef88d8e5631551519c7cc9", ConfirmationsCount = 2, ToWalletId = 2, TxId = "00b35d6f10f138c6484023cf379a8cfc2da516afd06a1321728ba331e810648f" }
                    );
                });

            modelBuilder.Entity("BitcoinApp.Domain.OutTransactionAggregate.OutTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 7)");

                    b.Property<int>("FromWalletId");

                    b.Property<string>("ToWalletAddress")
                        .IsRequired();

                    b.Property<string>("TxId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FromWalletId");

                    b.ToTable("OutTransactions");
                });

            modelBuilder.Entity("BitcoinApp.Domain.WalletAggregate.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(10, 7)");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Wallets");

                    b.HasData(
                        new { Id = 1, Address = "http://127.0.0.1:8332/wallet/wallet1.dat", Balance = 0.002m, Password = "password1" },
                        new { Id = 2, Address = "http://127.0.0.1:8332/wallet/wallet2.dat", Balance = 0.004m, Password = "password2" },
                        new { Id = 3, Address = "http://127.0.0.1:8332/wallet/wallet3.dat", Balance = 0.006m, Password = "password3" }
                    );
                });

            modelBuilder.Entity("BitcoinApp.Domain.InTransactionAggregate.InTransaction", b =>
                {
                    b.HasOne("BitcoinApp.Domain.WalletAggregate.Wallet")
                        .WithMany()
                        .HasForeignKey("ToWalletId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BitcoinApp.Domain.OutTransactionAggregate.OutTransaction", b =>
                {
                    b.HasOne("BitcoinApp.Domain.WalletAggregate.Wallet")
                        .WithMany()
                        .HasForeignKey("FromWalletId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
